let g:DisableAutoPHPFolding = 1

let NERDTreeQuitOnOpen = 0
set nospell

if has('gui_running')
    color desert
    if has("gui_gtk2")
        set guifont=Andale\ Mono\ Regular\ 11,Menlo\ Regular\ 10,Consolas\ Regular\ 11,Courier\ New\ Regular\ 13
    else
        set guifont=Andale\ Mono\ Regular:h14,Menlo\ Regular:h13,Consolas\ Regular:h14,Courier\ New\ Regular:h16
    endif
    if has('gui_macvim')
        set transparency=2          " Make the window slightly transparent
    endif
endif

" ShowMarks {
    let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    " Don't leave on by default, use :ShowMarksOn to enable
    let g:showmarks_enable = 0
    " For marks a-z
    highlight ShowMarksHLl gui=bold guibg=LightBlue guifg=Blue
    " For marks A-Z
    highlight ShowMarksHLu gui=bold guibg=LightRed guifg=DarkRed
    " For all other marks
    highlight ShowMarksHLo gui=bold guibg=LightYellow guifg=DarkYellow
    " For multiple marks on the same line.
    highlight ShowMarksHLm gui=bold guibg=LightGreen guifg=DarkGreen
" }
set autoread                    " automatically reads, helpful when VCS may have changed the file

" NERDTree {
    let g:nerdtree_tabs_open_on_gui_startup=1
    let g:nerdtree_tabs_open_on_new_tab=1
    let NERDTreeMouseMode=1
" }

" Make sure escape always takes you out of neocomplettion mode
    "iunmap <expr> <Esc>

" Configure typescript completion

autocmd FileType typescript setlocal balloonexpr=tsuquyomi#balloonexpr()
autocmd FileType typescript nmap <buffer> <Leader>t : <C-u>echo tsuquyomi#hint()<CR>

set nocompatible
set completeopt+=menuone
set rtp+=~/.vim/bundle/neocomplete.vim/
set rtp+=~/.vim/bundle/vimproc.vim/
set rtp+=~/.cache/neocomplete/tsuquyomi/

filetype plugin indent on
let g:neocomplete#enable_at_startup = 1
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.typescript = '[^. *\t]\.\w*\|\h\w*::'

" tags conf
set autochdir
set tags=tags;
"tagbar conf
nmap <F8> :TagbarToggle<CR>

if has("cscope")
    set csprg=/usr/local/app/cscope/bin/cscope
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb

    "跳到定义
    nmap ff <c-]>
    "返回
    nmap ss <c-t>

    "s:查找即查找C语言符号出现的地方
    nmap fs :cs find s <C-R>=expand("<cword>")<CR><CR>
    "g:查找函数、宏、枚举等定义的位置
    nmap fg :cs find g <C-R>=expand("<cword>")<CR><CR>
    "c:查找光标下的函数被调用的地方
    nmap fc :cs find c <C-R>=expand("<cword>")<CR><CR>
    "t: 查找指定的字符串出现的地方
    nmap ft :cs find t <C-R>=expand("<cword>")<CR><CR>
    "e:egrep模式查找,相当于egrep功能
    nmap fe :cs find e <C-R>=expand("<cword>")<CR><CR>
    "f: 查找文件名,相当于lookupfile
    nmap fn :cs find f <C-R>=expand("<cfile>")<CR><CR>
    "i: 查找当前文件名出现过的地方
    nmap fi :cs find i <C-R>=expand("<cfile>")<CR><CR>
    "d: 查找本当前函数调用的函数
    nmap fd :cs find d <C-R>=expand("<cword>")<CR><CR>

    "quickfix
    set cscopequickfix=s-,g-,c-,t-,e-,f-,i-,d-

endif

colorscheme desert
set encoding=utf-8

let g:indent_guides_enable_on_vim_startup = 1 
let g:indent_guides_auto_colors = 0 
let g:indent_guides_guide_size = 1 
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=darkgrey ctermbg=252
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey ctermbg=251

let g:nerdtree_tabs_open_on_console_startup=1

nnoremap <A-n> :tabn <CR>
nnoremap <A-p> :tabp <CR>
